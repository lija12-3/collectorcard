AWSTemplateFormatVersion: '2010-09-09'

Description: >
  Unified CI/CD pipeline using CodePipeline and CodeBuild for the Card Collectors project.
  - Handles pushes to main and feat/CDEV-134_codepipeline branches.
  - Runs CI (lint, test, build) for both branches.
  - Deploys automatically for main (production).
  - Feature branch builds run CI only (no deploy).
  - Includes a weekly dependency check pipeline.

# ---------------------------
# PARAMETERS
# ---------------------------
Parameters:
  GitHubConnectionArn:
    Type: String
    Description: ARN of an existing AWS CodeStar Connections connection for your GitHub account.
  RepoOwner:
    Type: String
    Description: GitHub repository owner (user or org name).
  RepoName:
    Type: String
    Description: GitHub repository name.
  MainBranch:
    Type: String
    Default: main
    Description: Main (production) branch name.
  FeatureBranch:
    Type: String
    Default: feat/CDEV-134_codepipeline
    Description: Feature branch name for testing CodePipeline setup.

# ---------------------------
# RESOURCES
# ---------------------------
Resources:

  # -------------------------------------
  # S3 bucket to store pipeline artifacts
  # -------------------------------------
  ArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # -------------------------------------
  # IAM Role for CodePipeline
  # -------------------------------------
  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess
        - arn:aws:iam::aws:policy/IAMReadOnlyAccess
      Policies:
        - PolicyName: CodePipelineExtraPermissions
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - codebuild:BatchGetProjects
                Resource: '*'

  # -------------------------------------
  # IAM Role for CodeBuild
  # -------------------------------------
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser
      Policies:
        - PolicyName: KubeCtlPermissionsOptional
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - eks:DescribeCluster
                  - ecr:GetAuthorizationToken
                  - ecr:BatchGetImage
                  - ecr:GetDownloadUrlForLayer
                Resource: '*'

  # -------------------------------------
  # CodeBuild Project: Combined CI + CD Logic
  # -------------------------------------
  BackendBuildAndDeployProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: backend-build-deploy
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_MEDIUM
        Image: aws/codebuild/standard:7.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: NODE_ENV
            Value: test
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                nodejs: 20
              commands:
                - echo "Installing dependencies..."
                - cd backend
                - npm ci

            pre_build:
              commands:
                - echo "Detecting branch..."
                - REF="${CODEBUILD_WEBHOOK_HEAD_REF:-$CODEBUILD_SOURCE_VERSION}"
                - BRANCH=$(echo $REF | sed 's|refs/heads/||')
                - echo "Branch detected: $BRANCH"
                - export BRANCH

            build:
              commands:
                - echo "Running CI logic (lint, build, test)..."
                - npm run lint
                - npm run type-check
                - npm run build:api
                - npm run build:lambdas
                - npm run test --if-present
                - echo "‚úÖ CI completed successfully for branch: $BRANCH"

            post_build:
              commands:
                - echo "Running deployment logic (if applicable)..."
                - |
                  if [[ "$BRANCH" == "main" ]]; then
                    echo "üöÄ Deploying to PRODUCTION..."
                    # Add production deploy commands here (kubectl/helm/aws CLI)
                  elif [[ "$BRANCH" == "feat/CDEV-134_codepipeline" ]]; then
                    echo "üß™ Feature branch build only ‚Äî skipping deploy."
                  else
                    echo "‚ö†Ô∏è Unknown branch, skipping deploy."
          artifacts:
            files:
              - backend/dist/**/*
              - backend/apps/api/dist/**/*
            discard-paths: no

  # -------------------------------------
  # CodePipeline: Unified CI/CD
  # -------------------------------------
  BackendPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt PipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: GitHub_Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: 1
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                ConnectionArn: !Ref GitHubConnectionArn
                FullRepositoryId: !Sub "${RepoOwner}/${RepoName}"
                BranchName: !Ref FeatureBranch
        - Name: BuildAndDeploy
          Actions:
            - Name: BuildAndDeployAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: SourceOutput
              Configuration:
                ProjectName: !Ref BackendBuildAndDeployProject

  # -------------------------------------
  # Simplified Dependency Checker (optional for now)
  # -------------------------------------
  DependencyPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt PipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: DependencySource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: 1
              OutputArtifacts:
                - Name: DependencySourceOutput
              Configuration:
                ConnectionArn: !Ref GitHubConnectionArn
                FullRepositoryId: !Sub "${RepoOwner}/${RepoName}"
                BranchName: !Ref FeatureBranch
        - Name: DependencyAudit
          Actions:
            - Name: AuditAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: DependencySourceOutput
              Configuration:
                ProjectName: !Ref BackendBuildAndDeployProject

  # -------------------------------------
  # EventBridge Rule: Weekly Dependency Check
  # -------------------------------------
  WeeklyDependencyRule:
    Type: AWS::Events::Rule
    Properties:
      Name: weekly-dependency-check
      ScheduleExpression: cron(0 0 ? * MON *) # every Monday at 00:00 UTC
      State: ENABLED
      Targets:
        - Arn: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${DependencyPipeline}
          Id: StartDependencyPipeline
          RoleArn: !GetAtt EventsInvokeRole.Arn

  # -------------------------------------
  # IAM Role for EventBridge
  # -------------------------------------
  EventsInvokeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: AllowStartPipeline
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - codepipeline:StartPipelineExecution
                Resource: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${DependencyPipeline}

# ---------------------------
# OUTPUTS
# ---------------------------
Outputs:
  ArtifactBucketName:
    Description: Name of the S3 bucket for pipeline artifacts
    Value: !Ref ArtifactBucket
  BackendPipelineName:
    Description: Name of unified CI/CD pipeline
    Value: !Ref BackendPipeline
  DependencyPipelineName:
    Description: Name of dependency-check pipeline
    Value: !Ref DependencyPipeline
  CodeBuildProjectName:
    Description: Combined CI/CD CodeBuild project
    Value: !Ref BackendBuildAndDeployProject
