#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

/**
 * Cardinal TypeScript Interface (CTI) Generator
 * This script generates a centralized index file that exposes all library interfaces
 * for easy consumption across microservices
 */

const LIBS_DIR = path.join(__dirname, '..', 'libs');
const OUTPUT_FILE = path.join(__dirname, '..', 'dist', 'index.d.ts');

function generateCTI() {
  console.log('ðŸ”§ Generating Cardinal TypeScript Interfaces...');
  
  const libs = fs.readdirSync(LIBS_DIR, { withFileTypes: true })
    .filter(dirent => dirent.isDirectory())
    .map(dirent => dirent.name);

  let content = `// Cardinal TypeScript Interfaces
// Auto-generated by index-cti script
// Generated at: ${new Date().toISOString()}

`;

  // Add library exports
  libs.forEach(lib => {
    const libPath = path.join(LIBS_DIR, lib, 'src', 'index.ts');
    if (fs.existsSync(libPath)) {
      content += `// ${lib} library exports\n`;
      content += `export * from '@cardinal/${lib}';\n\n`;
    }
  });

  // Add shared types
  content += `// Shared types and utilities\n`;
  content += `export * from '@shared/types';\n`;
  content += `export * from '@shared/utils';\n`;
  content += `export * from '@shared/constants';\n\n`;

  // Add main Cardinal module
  content += `// Main Cardinal module
export interface CardinalConfig {
  environment: 'development' | 'staging' | 'production';
  region: string;
  services: {
    user: string;
    payment: string;
    notification: string;
    content: string;
    analytics: string;
  };
}

export class Cardinal {
  static async initialize(config: CardinalConfig): Promise<void> {
    // Initialize Cardinal platform
  }
}
`;

  // Ensure dist directory exists
  const distDir = path.dirname(OUTPUT_FILE);
  if (!fs.existsSync(distDir)) {
    fs.mkdirSync(distDir, { recursive: true });
  }

  // Write the file
  fs.writeFileSync(OUTPUT_FILE, content);
  
  console.log(`âœ… Generated CTI file: ${OUTPUT_FILE}`);
  console.log(`ðŸ“¦ Exported ${libs.length} libraries`);
}

// Run the generator
if (require.main === module) {
  generateCTI();
}

module.exports = { generateCTI };
