# AWS API Gateway Configuration for Cardinal Platform
# This file defines the API Gateway structure for all Cardinal microservices

AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Cardinal Platform API Gateway'

Parameters:
  Stage:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Deployment stage
  
  Region:
    Type: String
    Default: us-east-1
    Description: AWS region

Resources:
  # API Gateway
  CardinalApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub 'cardinal-api-${Stage}'
      Description: 'Cardinal Platform API Gateway'
      EndpointConfiguration:
        Types:
          - REGIONAL
      Policy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: execute-api:Invoke
            Resource: '*'

  # API Gateway Deployment
  CardinalApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - UserServiceMethod
      - PaymentServiceMethod
      - NotificationServiceMethod
    Properties:
      RestApiId: !Ref CardinalApiGateway
      StageName: !Ref Stage

  # API Gateway Stage
  CardinalApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref CardinalApiGateway
      DeploymentId: !Ref CardinalApiDeployment
      StageName: !Ref Stage
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          LoggingLevel: INFO
          DataTraceEnabled: true
          MetricsEnabled: true

  # CORS Configuration
  CardinalCorsOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref CardinalApiGateway
      ResourceId: !GetAtt CardinalApiGateway.RootResourceId
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      RequestParameters:
        method.request.header.Access-Control-Request-Headers: false
        method.request.header.Access-Control-Request-Method: false
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  # User Service Integration
  UserServiceMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref CardinalApiGateway
      ResourceId: !GetAtt CardinalApiGateway.RootResourceId
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: HTTP_PROXY
        IntegrationHttpMethod: ANY
        Uri: !Sub 'https://${UserServiceLambda}.execute-api.${Region}.amazonaws.com/${Stage}/{proxy}'
        RequestParameters:
          integration.request.path.proxy: 'method.request.path.proxy'
        PassthroughBehavior: WHEN_NO_MATCH

  # Payment Service Integration
  PaymentServiceMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref CardinalApiGateway
      ResourceId: !GetAtt CardinalApiGateway.RootResourceId
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: HTTP_PROXY
        IntegrationHttpMethod: ANY
        Uri: !Sub 'https://${PaymentServiceLambda}.execute-api.${Region}.amazonaws.com/${Stage}/{proxy}'
        RequestParameters:
          integration.request.path.proxy: 'method.request.path.proxy'
        PassthroughBehavior: WHEN_NO_MATCH

  # Notification Service Integration
  NotificationServiceMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref CardinalApiGateway
      ResourceId: !GetAtt CardinalApiGateway.RootResourceId
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: HTTP_PROXY
        IntegrationHttpMethod: ANY
        Uri: !Sub 'https://${NotificationServiceLambda}.execute-api.${Region}.amazonaws.com/${Stage}/{proxy}'
        RequestParameters:
          integration.request.path.proxy: 'method.request.path.proxy'
        PassthroughBehavior: WHEN_NO_MATCH

  # API Gateway Usage Plan
  CardinalUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      UsagePlanName: !Sub 'cardinal-usage-plan-${Stage}'
      Description: 'Usage plan for Cardinal Platform API'
      ApiStages:
        - ApiId: !Ref CardinalApiGateway
          Stage: !Ref CardinalApiStage
      Throttle:
        BurstLimit: 1000
        RateLimit: 500
      Quota:
        Limit: 10000
        Period: DAY

  # API Gateway API Key
  CardinalApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: !Sub 'cardinal-api-key-${Stage}'
      Description: 'API Key for Cardinal Platform'
      Enabled: true

  # Usage Plan Key
  CardinalUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref CardinalApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref CardinalUsagePlan

  # CloudWatch Log Group
  CardinalApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/apigateway/cardinal-${Stage}'
      RetentionInDays: 14

Outputs:
  ApiGatewayUrl:
    Description: 'Cardinal API Gateway URL'
    Value: !Sub 'https://${CardinalApiGateway}.execute-api.${Region}.amazonaws.com/${Stage}'
    Export:
      Name: !Sub '${AWS::StackName}-ApiGatewayUrl'

  ApiKey:
    Description: 'Cardinal API Key'
    Value: !Ref CardinalApiKey
    Export:
      Name: !Sub '${AWS::StackName}-ApiKey'
