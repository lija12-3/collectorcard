AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation Template EKS Cluster.
Parameters:
  EnvironmentName:
    Description: Environment name for the application - [dev/production]
    Type: String
    AllowedValues:
      - dev
      - production
  EKSClusterName:
    Type: String
    Description: The Desired name of your AWS EKS Cluster.
    Default: eks-fargate-cluster
  NetworkStackName:
    Description: Name of an active CloudFormation stack of networking resources
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedPattern: ^[a-zA-Z][-a-zA-Z0-9]*$
  EFSPort:
    Description: EFS port
    Default: '2049'
    Type: Number
  GRPCPort:
    Description: GRPC port
    Default: '7233'
    Type: Number
  AvailabilityZoneName:
    Description: AvailabilityZone for EFS Filesystem
    Default: ca-central-1a
    Type: String
Resources:
  EKSIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-${EKSClusterName}-iamrole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
        - arn:aws:iam::aws:policy/AmazonEKSVPCResourceController
  EKSpodexecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-${EKSClusterName}-podexecrole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks-fargate-pods.amazonaws.com
            Action:
              - sts:AssumeRole
  EKSpodexecutionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${EnvironmentName}-${EKSClusterName}-podexecpolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - ecr:GetAuthorizationToken
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
              - logs:CreateLogStream
              - logs:CreateLogGroup
              - logs:DescribeLogStreams
              - logs:PutLogEvents
            Resource: '*'
      Roles:
        - !Ref EKSpodexecutionRole
  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cluster communication with worker nodes
      VpcId: !ImportValue
        Fn::Sub: ${NetworkStackName}-VpcId
  FargatePodSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Temporal fargate Pods
      VpcId: !ImportValue
        Fn::Sub: ${NetworkStackName}-VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref GRPCPort
          ToPort: !Ref GRPCPort
          CidrIp: !ImportValue
            Fn::Sub: ${NetworkStackName}-PrivateSubnet1Cidr
          Description: !Sub Inbound from Private Subnet1 to ${EnvironmentName} GRPC Port
        - IpProtocol: tcp
          FromPort: !Ref GRPCPort
          ToPort: !Ref GRPCPort
          CidrIp: !ImportValue
            Fn::Sub: ${NetworkStackName}-PrivateSubnet2Cidr
          Description: !Sub Inbound from Private Subnet2 to ${EnvironmentName} GRPC Port
  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Sub ${EnvironmentName}-${EKSClusterName}
      RoleArn: !GetAtt EKSIAMRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref ControlPlaneSecurityGroup
        SubnetIds:
          - !ImportValue
            Fn::Sub: ${NetworkStackName}-PrivateSubnet1Id
          - !ImportValue
            Fn::Sub: ${NetworkStackName}-PrivateSubnet2Id
      Version: '1.31'
      Logging:
        ClusterLogging:
          EnabledTypes:
            - Type: controllerManager
            - Type: authenticator
            - Type: api
            - Type: audit
            - Type: scheduler

  EKSFargateProfiles:
    Type: AWS::EKS::FargateProfile
    Properties:
      ClusterName: !Sub ${EnvironmentName}-${EKSClusterName}
      FargateProfileName: !Sub ${EnvironmentName}-EKSFargate-Profiles
      PodExecutionRoleArn: !GetAtt EKSpodexecutionRole.Arn
      Selectors:
        - Namespace: default
        - Namespace: kube-system
        - Namespace: external-secrets
      Subnets:
        - !ImportValue
          Fn::Sub: ${NetworkStackName}-PrivateSubnet1Id
        - !ImportValue
          Fn::Sub: ${NetworkStackName}-PrivateSubnet1Id
    DependsOn: EKSCluster

  EKSSampleFargateProfile:
    Type: AWS::EKS::FargateProfile
    DependsOn:
      - EKSCluster
      - EKSFargateProfiles
    Properties:
      ClusterName: !Sub ${EnvironmentName}-${EKSClusterName}
      FargateProfileName: !Sub ${EnvironmentName}-sample-profile
      PodExecutionRoleArn: !GetAtt EKSpodexecutionRole.Arn
      Selectors:
        - Namespace: !Sub ${EnvironmentName}-sample
      Subnets:
        - !ImportValue
          Fn::Sub: ${NetworkStackName}-PrivateSubnet1Id
        - !ImportValue
          Fn::Sub: ${NetworkStackName}-PrivateSubnet2Id
    
  EFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub Security group for Elastic Search cluster of ${EnvironmentName} environment
      GroupName: !Sub '${EnvironmentName}-PrometheusEFS'
      VpcId:
        Fn::ImportValue: !Sub ${NetworkStackName}-VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref EFSPort
          ToPort: !Ref EFSPort
          CidrIp: 
             Fn::ImportValue: !Sub ${NetworkStackName}-PrivateSubnet1Cidr
          Description: !Sub Inbound from Private Subnet1 to ${EnvironmentName} efs filesystem mount
        - IpProtocol: tcp
          FromPort: !Ref EFSPort
          ToPort: !Ref EFSPort
          CidrIp: 
             Fn::ImportValue: !Sub ${NetworkStackName}-PrivateSubnet2Cidr
          Description: !Sub Inbound from Private Subnet2 to ${EnvironmentName} efs filesystem mount
Outputs:
  EKSClusterEndpoint:
    Description: 'EKS OIDC Connection URL'
    Value: 
      "Fn::GetAtt": ["EKSCluster", "OpenIdConnectIssuerUrl"]
    Export:
      Name: !Sub "${AWS::StackName}-EKSClusterEndpoint" 
  FargatePodSecurityGroup:
    Description: 'EKS Fargate Pod Security group'
    Value: 
      Ref: FargatePodSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-FargatePodSecurityGroup"