import { ApiResponse, PaginatedResponse } from '../types';
export declare function createApiResponse<T>(success: boolean, data?: T, error?: string, message?: string): ApiResponse<T>;
export declare function createSuccessResponse<T>(data: T, message?: string): ApiResponse<T>;
export declare function createErrorResponse(error: string, message?: string): ApiResponse;
export declare function createPaginatedResponse<T>(data: T[], page: number, limit: number, total: number): PaginatedResponse<T>;
export declare function generateRandomString(length?: number): string;
export declare function generateUUID(): string;
export declare function sanitizeString(input: string): string;
export declare function isValidEmail(email: string): boolean;
export declare function isValidPhoneNumber(phone: string): boolean;
export declare function formatCurrency(amount: number, currency?: string): string;
export declare function formatDate(date: Date | string): string;
export declare function calculateOffset(page: number, limit: number): number;
export declare function deepClone<T>(obj: T): T;
export declare function deepMerge<T extends Record<string, any>>(target: T, source: Partial<T>): T;
export declare function retryWithBackoff<T>(fn: () => Promise<T>, maxRetries?: number, baseDelay?: number): Promise<T>;
export declare function debounce<T extends (...args: any[]) => any>(func: T, wait: number): (...args: Parameters<T>) => void;
export declare function throttle<T extends (...args: any[]) => any>(func: T, limit: number): (...args: Parameters<T>) => void;
export declare function sleep(ms: number): Promise<void>;
export declare function isEmpty(value: any): boolean;
export declare function capitalize(str: string): string;
export declare function toKebabCase(str: string): string;
export declare function toCamelCase(str: string): string;
